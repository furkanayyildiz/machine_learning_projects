# -*- coding: utf-8 -*-
"""Heart_Disease_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QuSuAm-wD2Klis0VVfFpHSpY3la0b8gl
"""

import pandas as pd
import pylab as pl
import numpy as np
import scipy.optimize as opt
import statsmodels.api as sm
from sklearn import preprocessing
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import seaborn as sn

data_frame = pd.read_csv("framingham.csv")
data_frame.drop(['education'], inplace = True, axis = 1)
data_frame.rename(columns ={'male':'Sex_male'}, inplace = True)
 

data_frame.dropna(axis = 0, inplace = True)
print(data_frame.head(), data_frame.shape)
print(data_frame.TenYearCHD.value_counts())

plt.figure(figsize=(8, 6))
sn.countplot(x='TenYearCHD', data=data_frame,
             palette="BuGn_r")
plt.show()

graph = data_frame['TenYearCHD'].plot()
plt.show(graph)

attributes = np.asarray(data_frame[['age', 'Sex_male', 'cigsPerDay',
                           'totChol', 'sysBP', 'glucose']])
tenYearCHD = np.asarray(data_frame['TenYearCHD'])
 

attributes = preprocessing.StandardScaler().fit(attributes).transform(attributes)

from sklearn.model_selection import train_test_split
attributes_train, attributes_test, tenYearCHD_train, tenYearCHD_test = train_test_split(
        attributes, tenYearCHD, test_size = 0.3, random_state = 4)
 
 
print ('Train set:', attributes_train.shape,  tenYearCHD_train.shape)
print ('Test set:', attributes_test.shape,  tenYearCHD_test.shape)

from sklearn.linear_model import LogisticRegression
 
logisticRegression = LogisticRegression()
logisticRegression.fit(attributes_train, tenYearCHD_train)
tenYearCHD_pred = logisticRegression.predict(attributes_test)
 

from sklearn.metrics import accuracy_score
 
print('Accuracy score of the model is = ',
      accuracy_score(tenYearCHD_test, tenYearCHD_pred))

from sklearn.ensemble import RandomForestClassifier
 
randomForest = RandomForestClassifier()
randomForest.fit(attributes_train, tenYearCHD_train)
 
accurancy = randomForest.score(attributes_test,tenYearCHD_test)*100
print('Accuracy of the model is = ', accurancy)

from sklearn.metrics import confusion_matrix, classification_report
 
confusionMatrix = confusion_matrix(tenYearCHD_test, tenYearCHD_pred)
conf_matrix = pd.DataFrame(data = confusionMatrix,
                           columns = ['Predicted:0', 'Predicted:1'],
                           index =['Actual:0', 'Actual:1'])

plt.figure(figsize = (9, 6))
sn.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = "Reds")
 
plt.show()
 
print('Report For confusion matrix =')
print (classification_report(tenYearCHD_test, tenYearCHD_pred))